// File: src/context/CartContext.tsx
import React, { createContext, useContext, useState, ReactNode, useMemo } from 'react';

export interface CartItem {
  id: string;
  name: string;
  price: number;
  quantity: number;
  image: string;
}

interface CartContextType {
  cartItems: CartItem[];
  addToCart: (item: CartItem) => void;
  updateQuantity: (id: string, quantity: number) => void;
  removeFromCart: (id: string) => void;
  clearCart: () => void;
  totalAmount: number;
}

const CartContext = createContext<CartContextType | undefined>(undefined);

export const CartProvider = ({ children }: { children: ReactNode }) => {
  const [cartItems, setCartItems] = useState<CartItem[]>([]);

  const addToCart = (item: CartItem) => {
    setCartItems((prevItems) => {
      const existingItem = prevItems.find((cartItem) => cartItem.id === item.id);
      if (existingItem) {
        return prevItems.map((cartItem) =>
          cartItem.id === item.id
            ? { ...cartItem, quantity: cartItem.quantity + item.quantity }
            : cartItem
        );
      }
      return [...prevItems, item];
    });
  };

  const updateQuantity = (id: string, quantity: number) => {
    setCartItems((prevItems) =>
      prevItems.map((item) =>
        item.id === id ? { ...item, quantity } : item
      )
    );
  };

  const removeFromCart = (id: string) => {
    setCartItems((prevItems) => prevItems.filter((item) => item.id !== id));
  };

  const clearCart = () => {
    setCartItems([]);
  };

  const totalAmount = useMemo(
    () => cartItems.reduce((total, item) => total + item.price * item.quantity, 0),
    [cartItems]
  );

  return (
    <CartContext.Provider
      value={{ cartItems, addToCart, updateQuantity, removeFromCart, clearCart, totalAmount }}
    >
      {children}
    </CartContext.Provider>
  );
};

export const useCartContext = () => {
  const context = useContext(CartContext);
  if (!context) {
    throw new Error('useCartContext precisa estar dentro de um CartProvider');
  }
  return context;
};

// File: src/context/CategoryContext.tsx
import React, { createContext, useContext, useState, ReactNode } from 'react';
import { categoriesModel } from '../models/CategoryModel';

// Definição do tipo para Categoria
export interface Category {
  id: string;
  name: string;
  image: string;
  description: string;
}

// Definição do tipo para o contexto de categorias
interface CategoryContextType {
  categories: Category[];
  addCategory: (category: Category) => void;
}

// Criação do contexto de categorias
const CategoryContext = createContext<CategoryContextType | undefined>(undefined);

// Provedor do contexto de categorias
export const CategoryProvider = ({ children }: { children: ReactNode }) => {
  const [categories, setCategories] = useState<Category[]>(categoriesModel);

  // Função para adicionar uma nova categoria
  const addCategory = (category: Category) => {
    setCategories((prevCategories) => [...prevCategories, category]);
  };

  return (
    <CategoryContext.Provider value={{ categories, addCategory }}>
      {children}
    </CategoryContext.Provider>
  );
};

// Hook personalizado para usar o contexto de categorias
export const useCategoryContext = () => {
  const context = useContext(CategoryContext);
  if (!context) {
    throw new Error('useCategoryContext deve ser usado dentro de um CategoryProvider');
  }
  return context;
};

// File: src/context/ProductContext.tsx
import React, { createContext, useContext, useState, ReactNode } from 'react';
import { productsModel } from '../models/ProductModel';

// Definição do tipo para Produto
export interface Product {
  id: string;
  title: string;
  price: number;
  image: string;
  description: string;
  categoryId: string;
}

// Definição do tipo para o contexto de produtos
interface ProductContextType {
  products: Product[];
  addProduct: (product: Product) => void;
}

// Criação do contexto de produtos
const ProductContext = createContext<ProductContextType | undefined>(undefined);

// Provedor do contexto de produtos
export const ProductProvider = ({ children }: { children: ReactNode }) => {
  const [products, setProducts] = useState<Product[]>(productsModel);

  // Função para adicionar um novo produto
  const addProduct = (product: Product) => {
    setProducts((prevProducts) => [...prevProducts, product]);
  };

  return (
    <ProductContext.Provider value={{ products, addProduct }}>
      {children}
    </ProductContext.Provider>
  );
};

// Hook personalizado para usar o contexto de produtos
export const useProductContext = () => {
  const context = useContext(ProductContext);
  if (!context) {
    throw new Error('useProductContext deve ser usado dentro de um ProductProvider');
  }
  return context;
};

// File: src/context/ReviewContext.tsx
// File: src/context/ReviewContext.tsx
import React, { createContext, useContext, useState, ReactNode } from 'react';
import { reviewsModel } from '../models/ReviewModel';

// Definição do tipo para Avaliação
export interface Review {
  id: string;
  productId: string;
  user: string;
  rating: number;
  comment: string;
  date: string;
}

// Definição do tipo para o contexto de avaliações
interface ReviewContextType {
  reviews: Review[];
  addReview: (review: Review) => void;
}

// Criação do contexto de avaliações
const ReviewContext = createContext<ReviewContextType | undefined>(undefined);

// Provedor do contexto de avaliações
export const ReviewProvider = ({ children }: { children: ReactNode }) => {
  const [reviews, setReviews] = useState<Review[]>(reviewsModel);

  // Função para adicionar uma nova avaliação
  const addReview = (review: Review) => {
    setReviews((prevReviews) => [...prevReviews, review]);
  };

  return (
    <ReviewContext.Provider value={{ reviews, addReview }}>
      {children}
    </ReviewContext.Provider>
  );
};

// Hook personalizado para usar o contexto de avaliações
export const useReviewContext = () => {
  const context = useContext(ReviewContext);
  if (!context) {
    throw new Error('useReviewContext deve ser usado dentro de um ReviewProvider');
  }
  return context;
};



// File: src/models/CategoryModel.ts
import { Category } from '../context/CategoryContext';

export const categoriesModel: Category[] = [
  {
    id: '1',
    name: 'Computadores',
    image: '',
    description: 'Computadores para lazer ou trabalho.',
  },
  {
    id: '2',
    name: 'Celulares',
    image: '',
    description: 'Visualize os smartphones disponíveis.',
  },
  {
    id: '3',
    name: 'Acessórios',
    image: '',
    description: 'Acessórios para seu computador.',
  },
  {
    id: '4',
    name: 'Áudio e televisões',
    image: '',
    description: 'Produtos para transformar sua sala.',
  },
  {
    id: '5',
    name: 'Produtos Inteligentes',
    image: '',
    description: 'Produtos par automatizar sua casa.',
  },
];

// File: src/models/ProductModel.ts
import { Product } from '../context/ProductContext';

export const productsModel: Product[] = [
  {
    id: '1',
    title: 'Dell Inspiron 15',
    price: 2997.86,
    image: 'https://m.media-amazon.com/images/I/51lGW2nP9qL._AC_UL320_.jpg',
    description: 'Notebook potente com processador Intel i7 e 16 GB de RAM.',
    categoryId: '1',
  },
  {
    id: '2',
    title: 'Desktop HP Pavilion',
    price: 4200.00,
    image: 'https://m.media-amazon.com/images/I/71N5yYjl-ZL._AC_UL320_.jpg',
    description: 'Desktop robusto com armazenamento de 1 TB e 12 GB de RAM.',
    categoryId: '1',
  },
  {
    id: '3',
    title: 'MacBook Pro 13"',
    price: 8700.00,
    image: 'https://m.media-amazon.com/images/I/41J9j6iVDvS._AC_UL320_.jpg',
    description: 'MacBook Pro com chip M1 e 256 GB de SSD.',
    categoryId: '1',
  },
  {
    id: '4',
    title: 'Lenovo ThinkPad T470s',
    price: 3900.00,
    image: 'https://m.media-amazon.com/images/I/61HdBBQSDYL._AC_UL320_.jpg',
    description: 'ThinkPad durável com teclado ergonômico e 8 GB de RAM.',
    categoryId: '1',
  },
  {
    id: '5',
    title: 'iMac 24"',
    price: 12000.00,
    image: 'https://m.media-amazon.com/images/I/51hFDIZIdIL._AC_UL320_.jpg',
    description: 'iMac com tela Retina 4.5K e design ultrafino.',
    categoryId: '1',
  },
  {
    id: '6',
    title: 'iPhone 13 Pro',
    price: 9500.00,
    image: 'https://m.media-amazon.com/images/I/41X0xIWEpuL._AC_UL320_.jpg',
    description: 'iPhone 13 Pro com câmera tripla e 256 GB de armazenamento.',
    categoryId: '2',
  },
  {
    id: '7',
    title: 'Samsung Galaxy S21',
    price: 8000.00,
    image: 'https://m.media-amazon.com/images/I/61GrFSYnKVL._AC_UL320_.jpg',
    description: 'Galaxy S21 com tela AMOLED de 6.2" e 128 GB de armazenamento.',
    categoryId: '2',
  },
  {
    id: '8',
    title: 'iPad Air',
    price: 6000.00,
    image: 'https://m.media-amazon.com/images/I/511vXoVIcJL._AC_UL320_.jpg',
    description: 'iPad Air com chip A14 Bionic e tela de 10.9".',
    categoryId: '2',
  },
  {
    id: '9',
    title: 'Galaxy Tab S7',
    price: 5500.00,
    image: 'https://m.media-amazon.com/images/I/41zrg4ISTBL._AC_UL320_.jpg',
    description: 'Tablet Samsung Galaxy Tab S7 com S Pen e tela de 11".',
    categoryId: '2',
  },
  {
    id: '10',
    title: 'Xiaomi Mi 11',
    price: 4500.00,
    image: 'https://m.media-amazon.com/images/I/41GK+ItincL._AC_UL320_.jpg',
    description: 'Smartphone Xiaomi Mi 11 com câmera de 108 MP e 256 GB de armazenamento.',
    categoryId: '2',
  },
  {
    id: '11',
    title: 'Teclado Mecânico RGB',
    price: 350.00,
    image: 'https://m.media-amazon.com/images/I/61Tn5a431IL._AC_UL320_.jpg',
    description: 'Teclado mecânico com iluminação RGB personalizável.',
    categoryId: '3',
  },
  {
    id: '12',
    title: 'Mouse Logitech',
    price: 250.00,
    image: 'https://m.media-amazon.com/images/I/617w9nbQooL._AC_UL320_.jpg',
    description: 'Mouse gamer Logitech com sensor de alta precisão e botões programáveis.',
    categoryId: '3',
  },
  {
    id: '13',
    title: 'Monitor Ultrawide 34"',
    price: 2500.00,
    image: 'https://m.media-amazon.com/images/I/610YctsLfcL._AC_UL320_.jpg',
    description: 'Monitor ultrawide com resolução QHD e taxa de atualização de 144 Hz.',
    categoryId: '3',
  },
  {
    id: '14',
    title: 'Headset Bluetooth',
    price: 600.00,
    image: 'https://m.media-amazon.com/images/I/51InjrQDYpL._AC_UL320_.jpg',
    description: 'Headset Bluetooth com cancelamento de ruído e som de alta fidelidade.',
    categoryId: '4',
  },
  {
    id: '15',
    title: 'Som Bluetooth',
    price: 199.99,
    image: 'https://m.media-amazon.com/images/I/61mr8Fpv2TL._AC_UL320_.jpg',
    description: 'Caixa de som portátil com conexão Bluetooth, som estéreo de alta qualidade e bateria de longa duração.',
    categoryId: '4',
  },
  {
    id: '16',
    title: 'Fitness Amazfit Bip 6',
    price: 79.99,
    image: 'https://m.media-amazon.com/images/I/61ueYKWLNqL._AC_UL320_.jpg',
    description: 'Relógio inteligente com monitoramento de atividades físicas, frequência cardíaca e sono, com bateria de até 14 dias.',
    categoryId: '5',
  },
  {
    id: '17',
    title: 'Xiaomi Smart Band 8',
    price: 49.99,
    image: 'https://m.media-amazon.com/images/I/510YT6bvSiL._AC_UL320_.jpg',
    description: 'Pulseira inteligente com tela AMOLED de 1,62", monitoramento de atividades, frequência cardíaca e sono, resistente à água.',
    categoryId: '5',
  },
  {
    id: '18',
    title: 'Câmera Wi-Fi 2K',
    price: 39.99,
    image: 'https://m.media-amazon.com/images/I/51xgggjDFNL._AC_UL320_.jpg',
    description: 'Câmera de segurança com resolução 2K, visão noturna, detecção de movimento e áudio bidirecional, compatível com Alexa e Google Assistant.',
    categoryId: '5',
  },
  {
    id: '19',
    title: 'Smart TV 4K',
    price: 497.99,
    image: 'https://m.media-amazon.com/images/I/61vNhQJqHKL._AC_UL320_.jpg',
    description: 'Smart TV 4K UHD de 55" com tecnologia QLED, HDR, assistente de voz integrado e acesso a diversos aplicativos de streaming.',
    categoryId: '4',
  },
  {
    id: '20',
    title: 'Xbox Series X',
    price: 499.99,
    image: 'https://m.media-amazon.com/images/I/51bcwM0qLaL._AC_UL320_.jpg',
    description: 'Console de última geração com suporte a jogos em 4K, 1 TB de armazenamento e compatibilidade com milhares de jogos.',
    categoryId: '4',
  },
];




// File: src/models/ReviewModel.ts
import { Review } from '../context/ReviewContext';

export const reviewsModel: Review[] = [
  // Avaliações para Smartphones
  {
    id: '1',
    productId: '1',
    user: 'Alice',
    rating: 4.5,
    comment: 'Ótimo desempenho e câmera excelente!',
    date: '01/04/2025',
  },
  {
    id: '2',
    productId: '1',
    user: 'Bruno',
    rating: 4.0,
    comment: 'Bateria poderia durar mais, mas no geral é um bom aparelho.',
    date: '02/04/2025',
  },
  {
    id: '3',
    productId: '2',
    user: 'Carla',
    rating: 5.0,
    comment: 'Design incrível e muito rápido!',
    date: '03/04/2025',
  },
  {
    id: '4',
    productId: '2',
    user: 'Daniel',
    rating: 4.5,
    comment: 'Ótima relação custo-benefício.',
    date: '04/04/2025',
  },
  {
    id: '5',
    productId: '3',
    user: 'Eduarda',
    rating: 4.0,
    comment: 'Tela grande e cores vibrantes.',
    date: '05/04/2025',
  },
  {
    id: '6',
    productId: '3',
    user: 'Fernando',
    rating: 4.5,
    comment: 'Muito satisfeito com a compra.',
    date: '06/04/2025',
  },
  {
    id: '7',
    productId: '4',
    user: 'Gabriela',
    rating: 5.0,
    comment: 'Melhor smartphone que já tive!',
    date: '07/04/2025',
  },
  {
    id: '8',
    productId: '4',
    user: 'Henrique',
    rating: 4.5,
    comment: 'Funciona perfeitamente e é muito bonito.',
    date: '08/04/2025',
  },
  {
    id: '9',
    productId: '5',
    user: 'Isabela',
    rating: 4.0,
    comment: 'Atende bem às minhas necessidades diárias.',
    date: '09/04/2025',
  },
  {
    id: '10',
    productId: '5',
    user: 'João',
    rating: 4.5,
    comment: 'Bom custo-benefício.',
    date: '10/04/2025',
  },
  // Avaliações para Laptops
  {
    id: '11',
    productId: '6',
    user: 'Karla',
    rating: 5.0,
    comment: 'Performance excepcional para trabalho e jogos.',
    date: '11/04/2025',
  },
  {
    id: '12',
    productId: '6',
    user: 'Lucas',
    rating: 4.5,
    comment: 'Design elegante e bateria de longa duração.',
    date: '12/04/2025',
  },
  {
    id: '13',
    productId: '7',
    user: 'Mariana',
    rating: 4.0,
    comment: 'Leve e fácil de transportar.',
    date: '13/04/2025',
  },
  {
    id: '14',
    productId: '7',
    user: 'Nicolas',
    rating: 4.5,
    comment: 'Tela de alta resolução é um diferencial.',
    date: '14/04/2025',
  },
  {
    id: '15',
    productId: '8',
    user: 'Olivia',
    rating: 5.0,
    comment: 'Ótimo para edição de vídeos e fotos.',
    date: '15/04/2025',
  },
  {
    id: '16',
    productId: '8',
    user: 'Paulo',
    rating: 4.5,
    comment: 'Teclado confortável e touchpad responsivo.',
    date: '16/04/2025',
  },
  {
    id: '17',
    productId: '9',
    user: 'Quésia',
    rating: 4.0,
    comment: 'Boa capacidade de armazenamento.',
    date: '17/04/2025',
  },
  {
    id: '18',
    productId: '9',
    user: 'Rafael',
    rating: 4.5,
    comment: 'Processador rápido e eficiente.',
    date: '18/04/2025',
  },
  {
    id: '19',
    productId: '10',
    user: 'Sabrina',
    rating: 5.0,
    comment: 'Atendeu todas as minhas expectativas!',
    date: '19/04/2025',
  },
  {
    id: '20',
    productId: '10',
    user: 'Thiago',
    rating: 4.5,
    comment: 'Excelente custo-benefício.',
    date: '20/04/2025',
  },
  // Avaliações para Tablets
  {
    id: '21',
    productId: '11',
    user: 'Ursula',
    rating: 4.5,
    comment: 'Perfeito para leitura e navegação.',
    date: '21/04/2025',
  },
  {
    id: '22',
    productId: '11',
    user: 'Vinícius',
    rating: 4.0,
    comment: 'Boa duração de bateria.',
    date: '22/04/2025',
  },
  {
    id: '23',
    productId: '12',
    user: 'Wendy',
    rating: 5.0,
    comment: 'Ótimo para assistir filmes e séries.',
    date: '23/04/2025',
  },
  {
    id: '24',
    productId: '14',
    user: 'Carlos',
    rating: 4.0,
    comment: 'Ótima qualidade de som e conforto.',
    date: '22/03/2025',
  },
  {
    id: '25',
    productId: '14',
    user: 'Mariana',
    rating: 4.5,
    comment: 'Bateria dura bastante e é muito confortável.',
    date: '23/03/2025',
  },
  {
    id: '26',
    productId: '15',
    user: 'Roberto',
    rating: 5.0,
    comment: 'Monitor com cores vibrantes e alta resolução.',
    date: '24/03/2025',
  },
  {
    id: '27',
    productId: '15',
    user: 'Fernanda',
    rating: 4.5,
    comment: 'Design elegante e ótima qualidade de imagem.',
    date: '25/03/2025',
  },
  {
    id: '28',
    productId: '16',
    user: 'Lucas',
    rating: 4.0,
    comment: 'Teclado mecânico com ótima resposta tátil.',
    date: '26/03/2025',
  },
  {
    id: '29',
    productId: '16',
    user: 'Patrícia',
    rating: 4.5,
    comment: 'Iluminação RGB personalizável e confortável para digitar.',
    date: '27/03/2025',
  },
  {
    id: '30',
    productId: '17',
    user: 'André',
    rating: 5.0,
    comment: 'Mouse preciso e confortável para longas sessões de uso.',
    date: '28/03/2025',
  },
  {
    id: '31',
    productId: '17',
    user: 'Beatriz',
    rating: 4.5,
    comment: 'Design ergonômico e ótima sensibilidade.',
    date: '29/03/2025',
  },
  {
    id: '32',
    productId: '18',
    user: 'Eduardo',
    rating: 4.0,
    comment: 'Cadeira confortável e com ótimo suporte lombar.',
    date: '30/03/2025',
  },
  {
    id: '33',
    productId: '18',
    user: 'Vanessa',
    rating: 4.5,
    comment: 'Material de qualidade e fácil de montar.',
    date: '31/03/2025',
  },
  {
    id: '34',
    productId: '19',
    user: 'Ricardo',
    rating: 5.0,
    comment: 'Impressora rápida e com excelente qualidade de impressão.',
    date: '01/04/2025',
  },
  {
    id: '35',
    productId: '19',
    user: 'Sônia',
    rating: 4.5,
    comment: 'Fácil de configurar e usar.',
    date: '02/04/2025',
  },
  {
    id: '36',
    productId: '20',
    user: 'Marcelo',
    rating: 4.0,
    comment: 'Tablet com ótimo desempenho e tela de alta resolução.',
    date: '03/04/2025',
  },
  {
    id: '37',
    productId: '20',
    user: 'Aline',
    rating: 4.5,
    comment: 'Leve e com boa duração de bateria.',
    date: '04/04/2025',
  },
  {
    id: '38',
    productId: '21',
    user: 'Gustavo',
    rating: 5.0,
    comment: 'Smartwatch com muitas funcionalidades e design moderno.',
    date: '05/04/2025',
  },
  {
    id: '39',
    productId: '21',
    user: 'Camila',
    rating: 4.5,
    comment: 'Fácil de usar e sincronizar com o smartphone.',
    date: '06/04/2025',
  },
  {
    id: '40',
    productId: '22',
    user: 'Renato',
    rating: 4.0,
    comment: 'Câmera com ótima qualidade de imagem e fácil de transportar.',
    date: '07/04/2025',
  },
  {
    id: '41',
    productId: '22',
    user: 'Larissa',
    rating: 4.5,
    comment: 'Bateria dura bastante e possui muitos recursos.',
    date: '08/04/2025',
  },
  {
    id: '42',
    productId: '23',
    user: 'Fábio',
    rating: 5.0,
    comment: 'Console com gráficos incríveis e muitos jogos disponíveis.',
    date: '09/04/2025',
  },
  {
    id: '43',
    productId: '23',
    user: 'Juliana',
    rating: 4.5,
    comment: 'Interface amigável e ótimo desempenho.',
    date: '10/04/2025',
  },
  {
    id: '44',
    productId: '24',
    user: 'Otávio',
    rating: 4.0,
    comment: 'Sistema de som com qualidade excepcional e fácil de instalar.',
    date: '11/04/2025',
  },
  {
    id: '45',
    productId: '24',
    user: 'Isabela',
    rating: 4.5,
    comment: 'Design moderno e som potente.',
    date: '12/04/2025',
  },
];

// File: src/navigation/AppNavigator.tsx
/* eslint-disable react/no-unstable-nested-components */
import React from 'react';
import { TouchableOpacity } from 'react-native';
import { createStackNavigator } from '@react-navigation/stack';
import { NavigationContainer } from '@react-navigation/native';
import HomeScreen from '../screens/HomeScreen';
import CategoryScreen from '../screens/CategoryScreen';
import ProductListScreen from '../screens/ProductListScreen';
import ProductDetailScreen from '../screens/ProductDetailScreen';
import CartScreen from '../screens/CartScreen';
import CheckoutScreen from '../screens/CheckoutScreen';
import OrderConfirmationScreen from '../screens/OrderConfirmationScreen';
import TrackingScreen from '../screens/TrackingScreen';
import ProductReviews from '../screens/ProductReviews';
import EvilIcons from '@react-native-vector-icons/evil-icons';

const Stack = createStackNavigator();

const AppNavigator: React.FC = () => {
  return (
    <NavigationContainer>
      <Stack.Navigator
        initialRouteName="Início"
        screenOptions={({
          navigation,
        }) => ({
          headerStyle: { backgroundColor: '#007bff' },
          headerTintColor: '#fff',
          headerTitleStyle: { fontWeight: 'bold' },
          headerRight: () => (
            <TouchableOpacity
              style={{
                marginRight: 16,
                padding: 4,
              }}
              onPress={() => navigation.navigate('Carrinho de compras')}
            >
              <EvilIcons name="cart" size={40} color="#fff" />
            </TouchableOpacity>
          ),
        })}
      >
        <Stack.Screen name="Início" component={HomeScreen} />
        <Stack.Screen name="Categorias" component={CategoryScreen} />
        <Stack.Screen name="Lista de produtos" component={ProductListScreen} />
        <Stack.Screen name="Detalhes do produto" component={ProductDetailScreen} />
        <Stack.Screen name="Carrinho de compras" component={CartScreen} />
        <Stack.Screen name="Pagamento" component={CheckoutScreen} />
        <Stack.Screen name="Compra confirmada" component={OrderConfirmationScreen} />
        <Stack.Screen name="Rastreio do produto" component={TrackingScreen} />
        <Stack.Screen name="Avaliações do produto" component={ProductReviews} />
      </Stack.Navigator>
    </NavigationContainer>
  );
};

export default AppNavigator;

// File: src/screens/CartScreen.tsx
import React from 'react';
import { View } from 'react-native';
import { ShoppingCart } from 'react-native-ecommerce-components';
import { useCartContext } from '../context/CartContext';

const CartScreen = ({ navigation }: any) => {
  const { cartItems, updateQuantity, removeFromCart, totalAmount } = useCartContext();

  const handleCheckout = () => {
    navigation.navigate('Pagamento');
  };

  return (
    <View style={{ flex: 1, padding: 20, backgroundColor: 'white' }}>
      <ShoppingCart
        language="pt"
        items={cartItems}
        onUpdateQuantity={updateQuantity}
        onRemoveItem={removeFromCart}
        onCheckout={handleCheckout}
        title="Carrinho de Compras"
        subTitle={`Valor total: R$ ${totalAmount.toFixed(2)}`}
      />
    </View>
  );
};

export default CartScreen;

// File: src/screens/CategoryScreen.tsx
import React from 'react';
import { View } from 'react-native';
import { CategoryList } from 'react-native-ecommerce-components';
import { useCategoryContext } from '../context/CategoryContext';

const CategoryScreen = ({ navigation }: any) => {
  const { categories } = useCategoryContext();

  const handleCategorySelect = (category: any) => {
    navigation.navigate('Lista de produtos', { categoryId: category.id });
  };

  return (
    <View style={{ flex: 1, padding: 20, backgroundColor: 'white' }}>
      <CategoryList
        categories={categories}
        onSelectCategory={handleCategorySelect}
        title="Navegar entre as categorias"
        subTitle="Selecione uma categoria e veja seus produtos"
      />
    </View>
  );
};

export default CategoryScreen;

// File: src/screens/CheckoutScreen.tsx
import React from 'react';
import { View } from 'react-native';
import { PaymentGateway } from 'react-native-ecommerce-components';
import { useCartContext } from '../context/CartContext';

const CheckoutScreen = ({ navigation }: any) => {
  const { totalAmount, clearCart } = useCartContext();

  const handlePayment = (paymentDetails: {
    cardNumber: string;
    cardHolder: string;
    expirationDate: string;
    cvv: string;
    billingAddress?: string;
  }) => {
    // Processar pagamento com os detalhes fornecidos
    // Após o processamento bem-sucedido:
    clearCart();
    navigation.navigate('Compra confirmada', {
      orderId: 'ORD12345',
      orderDate: new Date().toLocaleDateString(),
      totalAmount,
      paymentMethod: 'Cartão de Crédito',
      shippingAddress: paymentDetails.billingAddress || 'Endereço não informado',
    });
  };

  return (
    <View style={{ flex: 1, justifyContent: 'center', backgroundColor: 'white' }}>
      <PaymentGateway
        language="pt"
        title="Realize o pagamento"
        subTitle="Apenas pagamentos por cartão são aceitos no momento"
        onPaymentSubmit={handlePayment}
        styles={{
          button: {
            backgroundColor: '#007bff',
          },
        }}
      />
    </View>
  );
};

export default CheckoutScreen;

// File: src/screens/HomeScreen.tsx
import React, { useEffect, useState } from 'react';
import { View, Text, Button, FlatList, TouchableOpacity, StyleSheet } from 'react-native';
import { SearchBar } from 'react-native-ecommerce-components';
import { Product, useProductContext } from '../context/ProductContext';

const HomeScreen = ({ navigation }: any) => {
  const [filteredProducts, setFilteredProducts] = useState<Product[]>([]);

  const { products } = useProductContext();

  const handleSearch = (query: string) => {
    if (!query) {
      setFilteredProducts(products);
      return;
    }
    const filtered = products.filter((product) =>
      product.title.toLowerCase().includes(query.toLowerCase())
    );
    setFilteredProducts(filtered);
  };

  const handleNavigateToCategories = () => {
    navigation.navigate('Categorias');
  };

  const handleProductPress = (productId: string) => {
    navigation.navigate('Detalhes do produto', { productId });
  };

  const renderProductItem = ({ item }: { item: { id: string; title: string } }) => (
    <TouchableOpacity onPress={() => handleProductPress(item.id)} style={styles.productItem}>
      <Text style={styles.productTitle}>{item.title}</Text>
    </TouchableOpacity>
  );

  useEffect(() => {
    setFilteredProducts(products);
  }, [products]);

  return (
    <View style={styles.container}>
      <Text style={styles.header}>TechEcommerce</Text>
      <Text style={styles.subtitle}>Um ecommerce simples de produtos de tecnologia</Text>
      <SearchBar onSearch={handleSearch} language="pt" />
      <Button color="#007bff" title="Ver Categorias" onPress={handleNavigateToCategories} />
      <FlatList
        data={filteredProducts}
        keyExtractor={(item) => item.id}
        renderItem={renderProductItem}
        ListEmptyComponent={<Text style={styles.emptyMessage}>Não foram encontrados produtos</Text>}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: 'white',
  },
  header: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 10,
  },
  subtitle: {
    fontSize: 16,
    marginBottom: 10,
    color: '#555',
  },
  productItem: {
    paddingVertical: 15,
    borderBottomWidth: 1,
    borderBottomColor: '#ccc',
  },
  productTitle: {
    fontSize: 18,
    color: '#333',
  },
  emptyMessage: {
    textAlign: 'center',
    marginTop: 20,
    fontSize: 16,
    color: '#888',
  },
});

export default HomeScreen;

// File: src/screens/OrderConfirmationScreen.tsx
import React from 'react';
import { View } from 'react-native';
import { OrderConfirmation } from 'react-native-ecommerce-components';

const OrderConfirmationScreen = ({ navigation, route }: any) => {
  const {
    orderId,
    orderDate,
    totalAmount,
    paymentMethod,
    shippingAddress,
  } = route.params;

  const handleContinueShopping = () => {
    navigation.navigate('Início');
  };

  const handleViewOrderDetails = () => {
    navigation.navigate('Rastreio do produto', {
      orderId,
      orderDate,
      totalAmount,
      paymentMethod,
      shippingAddress,
    });
  };

  return (
    <View style={{ flex: 1, justifyContent: 'center', backgroundColor: 'white' }}>
      <OrderConfirmation
        language="pt"
        title="Compra realizada"
        subTitle="Obrigado!"
        orderId={orderId}
        orderDate={orderDate}
        totalAmount={totalAmount}
        paymentMethod={paymentMethod}
        shippingAddress={shippingAddress}
        onContinueShopping={handleContinueShopping}
        onViewOrderDetails={handleViewOrderDetails}
      />
    </View>
  );
};

export default OrderConfirmationScreen;

// File: src/screens/ProductDetailScreen.tsx
import React from 'react';
import { View, Button } from 'react-native';
import { ProductDetail } from 'react-native-ecommerce-components';
import { useProductContext } from '../context/ProductContext';
import { useCartContext } from '../context/CartContext';

const ProductDetailScreen = ({ navigation, route }: any) => {
  const { productId } = route.params;
  const { products } = useProductContext();
  const { addToCart } = useCartContext();

  const product = products.find(p => p.id === productId);

  const handleAddToCart = () => {
    if (!product) {
      return;
    }
    addToCart({ ...product, quantity: 1, name: product.title });
    navigation.navigate('Carrinho de compras');
  };

  const handleBuyNow = () => {
    if (!product) {
      return;
    }
    addToCart({ ...product, quantity: 1, name: product.title });
    navigation.navigate('Pagamento');
  };

  const handleNavigate_Reviews = () => {
    navigation.navigate('Avaliações do produto', { productId });
  };

  return (
    <View style={{ flex: 1, padding: 20, backgroundColor: 'white' }}>
      <Button title="Ver Avaliações" onPress={handleNavigate_Reviews} />
      {product && (
        <ProductDetail
          language="pt"
          product={product}
          onAddToCart={handleAddToCart}
          onBuyNow={handleBuyNow}
          title="Conheça o produto"
          subTitle="Veja as informações do produto"
          styles={{
            image: {
              resizeMode: 'contain',
            },
          }}
        />
      )}
    </View>
  );
};

export default ProductDetailScreen;

// File: src/screens/ProductListScreen.tsx
import React from 'react';
import { Alert, View } from 'react-native';
import { ProductList } from 'react-native-ecommerce-components';
import { useProductContext } from '../context/ProductContext';
import { useCartContext } from '../context/CartContext';

const ProductListScreen = ({ navigation, route }: any) => {
  const { categoryId } = route.params;
  const { products } = useProductContext();
  const { addToCart } = useCartContext();

  const filteredProducts = products.filter(p => p.categoryId === categoryId);

  const handleAddToCart = (product: any) => {
    addToCart({ ...product, quantity: 1, name: product.title });
    Alert.alert('Produto adicionado ao carrinho', `${product.title} foi adicionado ao carrinho.`);
  };

  const handleProductPress = (product: any) => {
    navigation.navigate('Detalhes do produto', { productId: product.id });
  };

  return (
    <View style={{ flex: 1, backgroundColor: 'white' }}>
      <ProductList
        language="pt"
        products={filteredProducts}
        onAddToCart={handleAddToCart}
        onProductPress={handleProductPress}
        gridView={true}
        title="Navegar entre produtos"
        subTitle="Os melhores estão aqui"
        styles={{
          button: {
            backgroundColor: '#007bff',
          },
        }}
      />
    </View>
  );
};

export default ProductListScreen;

// File: src/screens/ProductReviews.tsx
import React from 'react';
import { View } from 'react-native';
import { ReviewAndRatings } from 'react-native-ecommerce-components';
import { useReviewContext } from '../context/ReviewContext';

const ProductReviews = ({ route }: any) => {
  const { productId } = route.params;
  const { reviews, addReview } = useReviewContext();

  const productReviews = reviews.filter(r => r.productId === productId);

  const averageRating =
    productReviews.reduce((sum, r) => sum + r.rating, 0) / productReviews.length;

  const onAddReview = (review: any) => {
    addReview({
      ...review,
      id: productReviews.length + 1 + '',
      date: new Date().toLocaleDateString('pt-BR', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
      }),
      productId,
    });
  };

  return (
    <View style={{ flex: 1, padding: 20, backgroundColor: 'white' }}>
      <ReviewAndRatings
        language="pt"
        reviews={productReviews}
        averageRating={averageRating}
        totalReviews={productReviews.length}
        onAddReview={onAddReview}
        title="Opiniões dos clientes sobre o produto"
        subTitle="Veja as avaliações"
      />
    </View>
  );
};

export default ProductReviews;

// File: src/screens/TrackingScreen.tsx
import React from 'react';
import { View } from 'react-native';
import { OrderTracking } from 'react-native-ecommerce-components';

const steps = [
  {
    id: '1',
    title: 'Pedido realizado',
    description: 'Seu pedido foi feito.',
    status: 'completed',
  },
  {
    id: '2',
    title: 'Pedido processado',
    description: 'Seu pedido está sendo processado.',
    status: 'completed',
  },
  {
    id: '3',
    title: 'Enviado',
    description: 'Seu pedido foi enviado.',
    status: 'current',
  },
  {
    id: '4',
    title: 'A caminho',
    description: 'Seu pedido está a caminho.',
    status: 'pending',
  },
  {
    id: '5',
    title: 'Entregue',
    description: 'Seu pedido foi entregue.',
    status: 'pending',
  },
];

const TrackingScreen = () => {
  return (
    <View style={{ flex: 1, backgroundColor: 'white' }}>
      <OrderTracking
        language="pt"
        title="Rastreie o produto"
        subTitle="Acompanhe o andamento da entrega"
        steps={steps as any}
      />
    </View>
  );
};

export default TrackingScreen;

